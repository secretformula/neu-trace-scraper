// Generated by CoffeeScript 1.7.1
(function() {
  var cheerio, cookies, delay, fs, loadReviews, loadTrace, login, postLogin, questions, questionsJSON, repeat, request, reviews, scrape, scrapeReview, start, userAgent;

  fs = require('fs');

  request = require('request');

  cheerio = require('cheerio');

  userAgent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.103 Safari/537.36';

  cookies = request.jar();

  reviews = [];

  questions = [
    {
      text: "All responses are completely anonymous, and participation in the evaluation process is expected. However, you are permitted to opt out of completing this questionnaire by selecting \"Opt Out.\"",
      options: ["No Response", "I will participate", "I choose not to participate"]
    }, {
      text: "The syllabus helped me to learn.",
      options: ["Strongly Agree", "Agree", "Neutral", "Disagree", "Strongly Disagree", "No Response", "N/A"]
    }, {
      text: "The textbook(s) helped me to learn.",
      options: ["Strongly Agree", "Agree", "Neutral", "Disagree", "Strongly Disagree", "No Response", "N/A"]
    }, {
      text: "The materials posted online, including Blackboard, helped me to learn.",
      options: ["Strongly Agree", "Agree", "Neutral", "Disagree", "Strongly Disagree", "No Response", "N/A"]
    }, {
      text: "The out-of-class assignments and fieldwork helped me to learn.",
      options: ["Strongly Agree", "Agree", "Neutral", "Disagree", "Strongly Disagree", "No Response", "N/A"]
    }, {
      text: "The lectures helped me to learn.",
      options: ["Strongly Agree", "Agree", "Neutral", "Disagree", "Strongly Disagree", "No Response", "N/A"]
    }, {
      text: "The in-class discussions and activities helped me to learn.",
      options: ["Strongly Agree", "Agree", "Neutral", "Disagree", "Strongly Disagree", "No Response", "N/A"]
    }, {
      text: "The classroom technology helped me to learn.",
      options: ["Strongly Agree", "Agree", "Neutral", "Disagree", "Strongly Disagree", "No Response", "N/A"]
    }, {
      text: "The number of hours per week I devoted to this course including lectures, discussions, homework, reading, projects, assignments and tests",
      options: ["1-4", "5-8", "9-12", "13-16", "17-20", "No Response"]
    }, {
      text: "I found this course intellectually challenging.",
      options: ["Strongly Agree", "Agree", "Neutral", "Disagree", "Strongly Disagree", "No Response", "N/A"]
    }, {
      text: "I learned a lot in this course.",
      options: ["Strongly Agree", "Agree", "Neutral", "Disagree", "Strongly Disagree", "No Response", "N/A"]
    }, {
      text: "I learned to apply course concepts and principles.",
      options: ["Strongly Agree", "Agree", "Neutral", "Disagree", "Strongly Disagree", "No Response", "N/A"]
    }, {
      text: "I developed additional skills in expressing myself orally and in writing.",
      options: ["Strongly Agree", "Agree", "Neutral", "Disagree", "Strongly Disagree", "No Response", "N/A"]
    }, {
      text: "I learned to analyze and evaluate ideas, arguments, and points of view",
      options: ["Strongly Agree", "Agree", "Neutral", "Disagree", "Strongly Disagree", "No Response", "N/A"]
    }, {
      text: "The instructor possessed the basic communications skills necessary to teach the course.",
      options: ["Strongly Agree", "Agree", "Neutral", "Disagree", "Strongly Disagree", "No Response", "N/A"]
    }, {
      text: "The instructor clearly communicated ideas and information.",
      options: ["Strongly Agree", "Agree", "Neutral", "Disagree", "Strongly Disagree", "No Response", "N/A"]
    }, {
      text: "The instructor clearly stated the objectives of the course.",
      options: ["Strongly Agree", "Agree", "Neutral", "Disagree", "Strongly Disagree", "No Response", "N/A"]
    }, {
      text: "The instructor covered what was stated in the course objectives and syllabus.",
      options: ["Strongly Agree", "Agree", "Neutral", "Disagree", "Strongly Disagree", "No Response", "N/A"]
    }, {
      text: "The instructor came to class prepared to teach.",
      options: ["Strongly Agree", "Agree", "Neutral", "Disagree", "Strongly Disagree", "No Response", "N/A"]
    }, {
      text: "The instructor used class time effectively.",
      options: ["Strongly Agree", "Agree", "Neutral", "Disagree", "Strongly Disagree", "No Response", "N/A"]
    }, {
      text: "The instructor provided sufficient feedback.",
      options: ["Strongly Agree", "Agree", "Neutral", "Disagree", "Strongly Disagree", "No Response", "N/A"]
    }, {
      text: "The instructor fairly evaluated my performance.",
      options: ["Strongly Agree", "Agree", "Neutral", "Disagree", "Strongly Disagree", "No Response", "N/A"]
    }, {
      text: "The instructor is someone I would recommend to other students.",
      options: ["Strongly Agree", "Agree", "Neutral", "Disagree", "Strongly Disagree", "No Response", "N/A"]
    }, {
      text: "The instructor treated students with respect.",
      options: ["Strongly Agree", "Agree", "Neutral", "Disagree", "Strongly Disagree", "No Response", "N/A"]
    }, {
      text: "The instructor acknowledged and took effective action when students did not understand the material.",
      options: ["Strongly Agree", "Agree", "Neutral", "Disagree", "Strongly Disagree", "No Response", "N/A"]
    }, {
      text: "The instructor was available to assist students outside of class.",
      options: ["Strongly Agree", "Agree", "Neutral", "Disagree", "Strongly Disagree", "No Response", "N/A"]
    }, {
      text: "The instructor displayed enthusiasm for the course.",
      options: ["Strongly Agree", "Agree", "Neutral", "Disagree", "Strongly Disagree", "No Response", "N/A"]
    }, {
      text: "What is your overall rating of this instructor's teaching effectiveness?",
      options: ["Almost Always Effective", "Usually Effective", "Sometimes Effective", "Rarely Effective", "Never Effective", "No Response"]
    }
  ];

  questionsJSON = JSON.stringify(questions, null, 2);

  if (!fs.existsSync('questions.json')) {
    fs.writeFile('questions.json', questionsJSON, function(error) {
      if (error) {
        throw error;
      }
      return console.log("questions JSON written");
    });
  }

  if (!fs.existsSync('reviews.json')) {
    fs.writeFile('reviews.json', '', function(error) {
      if (error) {
        throw error;
      }
    });
  }

  fs.readFile('reviews.json', 'utf8', function(error, data) {
    if (error) {
      throw error;
    }
    try {
      return reviews = JSON.parse(data);
    } catch (_error) {
      error = _error;
      return reviews = {};
    } finally {
      start();
    }
  });

  repeat = function(ms, func) {
    return setInterval(func, ms);
  };

  repeat(60000, function() {
    console.log('writing reviews to disc');
    return fs.writeFile('reviews.json', JSON.stringify(reviews), function(error) {
      if (error) {
        throw error;
      }
      return console.log('wrote reviews to disks');
    });
  });

  request = request.defaults({
    jar: cookies,
    followAllRedirects: true,
    headers: {
      'User-Agent': userAgent
    }
  });

  scrape = function() {
    return request.post({
      url: 'https://prod-web.neu.edu/wasapp/TRACE25/secure/search.do',
      form: {
        'survey.surveyID': '0',
        'instructor.nuid': '',
        'department.deptId': ''
      }
    }, function(err, res, html) {
      var $, reviewURLs;
      $ = cheerio.load(html);
      reviewURLs = [];
      $('tr').each(function(i, el) {
        return reviewURLs.push($(el).find('a').attr('href'));
      });
      return loadReviews(reviewURLs);
    });
  };

  delay = function(ms, func) {
    return setTimeout(func, ms);
  };

  loadReviews = function(reviewURLs) {
    var courseId, current, key, reviewUrlSearch, sectionId;
    console.log("Remaining: " + reviewURLs.length);
    current = reviewURLs.pop();
    if (!/detail.do/.test(current)) {
      console.log('not a real review');
      loadReviews(reviewURLs);
      return;
    }
    reviewUrlSearch = current.split("?")[1].split("&");
    courseId = reviewUrlSearch[0].split("=")[1];
    sectionId = reviewUrlSearch[1].split("=")[1];
    key = "" + courseId + "|" + sectionId;
    if (reviews[key] != null) {
      console.log('review already exists!');
      loadReviews(reviewURLs);
      return;
    }
    return scrapeReview(current, key, courseId, sectionId, reviewURLs);
  };

  scrapeReview = function(review_url, key, courseId, sectionId, reviewURLs) {
    console.log("Scraping " + review_url);
    return request("https://prod-web.neu.edu" + review_url, function(error, response, html) {
      var $, courseCommentsDone, courseCommentsUrl, profCommentsDone, profCommentsUrl, question, responses, review, saveCourseComments, saveProfComments, saveReview, text, _i, _len;
      if (error) {
        throw error;
      }
      $ = cheerio.load(html);
      review = {
        professor: $('th:contains("Instructor Name")').next().text(),
        term: $('th:contains("Term")').next().text(),
        numStudents: parseInt($('th:contains("Students Enrolled")').next().text()),
        numResponses: parseInt($('th:contains("Students Polled")').next().text().split('(')[0]),
        subject: $('th:contains("Subject")').next().text(),
        course: $('th:contains("Course")').next().text()
      };
      console.log(review);
      responses = [];
      for (_i = 0, _len = questions.length; _i < _len; _i++) {
        question = questions[_i];
        text = question['text'];
        response = {};
        response['question'] = text;
        response['answers'] = [];
        $("strong:contains(" + text + ")").next().find('tr').each(function(i, el) {
          return response['answers'].push(parseInt($(el).find('td:not(.nowrap)').text()));
        });
        responses.push(response);
      }
      review['responses'] = responses;
      courseCommentsUrl = "/wasapp/TRACE25/secure/memo.do?ciid=" + courseId + "&qid=82&sid=" + sectionId;
      profCommentsUrl = "/wasapp/TRACE25/secure/memo.do?ciid=" + courseId + "&qid=81&sid=" + sectionId;
      courseCommentsDone = false;
      profCommentsDone = false;
      saveReview = (function(_this) {
        return function() {
          var _j, _len1, _ref, _ref1;
          _ref = ['professor', 'term', 'numStudents', 'numResponses', 'subject', 'course'];
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            key = _ref[_j];
            if ((_ref1 = review[key]) === '' || _ref1 === (void 0) || _ref1 === null) {
              throw "Not a good review!";
            }
          }
          reviews[key] = review;
          loadReviews(reviewURLs);
          console.log(reviews[key]);
        };
      })(this);
      saveCourseComments = function(courseComments) {
        console.log(courseComments);
        review['courseComments'] = courseComments;
        courseCommentsDone = true;
        if (profCommentsDone) {
          return saveReview();
        }
      };
      saveProfComments = function(profComments) {
        console.log(profComments);
        review['profComments'] = profComments;
        profCommentsDone = true;
        if (courseCommentsDone) {
          return saveReview();
        }
      };
      request("https://prod-web.neu.edu" + courseCommentsUrl, function(error, response, html) {
        var courseComments;
        if (error) {
          throw error;
        }
        courseComments = [];
        $ = cheerio.load(html);
        $('p').each((function(_this) {
          return function(i, el) {
            var comment;
            comment = $(el).text().trim();
            if (!/Close Window/i.test(comment)) {
              if (comment !== '') {
                return courseComments.push(comment);
              }
            }
          };
        })(this));
        return saveCourseComments(courseComments);
      });
      return request("https://prod-web.neu.edu" + profCommentsUrl, function(error, response, html) {
        var profComments;
        if (error) {
          throw error;
        }
        profComments = [];
        $ = cheerio.load(html);
        $('p').each((function(_this) {
          return function(i, el) {
            var comment;
            comment = $(el).text().trim();
            if (!/Close Window/i.test(comment)) {
              if (comment !== '') {
                return profComments.push(comment);
              }
            }
          };
        })(this));
        return saveProfComments(profComments);
      });
    });
  };

  loadTrace = function(url) {
    return request(url, function(err, res, html) {
      if (!err) {
        return scrape();
      }
    });
  };

  postLogin = function() {
    var traceURL;
    traceURL = 'http://myneu.neu.edu/cp/ip/login?sys=was&url=https://prod-web.neu.edu/wasapp/TRACE25';
    return request(traceURL, function(err, res, html) {
      var data, name, new_cookie, pair, param, search_params, val, _i, _len;
      if (!err) {
        search_params = res['request']['uri']['search'].substring(1).split('&');
        data = {};
        for (_i = 0, _len = search_params.length; _i < _len; _i++) {
          param = search_params[_i];
          pair = param.split('=');
          name = pair[0];
          val = pair[1];
          if (name === "cookie") {
            new_cookie = request.cookie(unescape(val));
            cookies.setCookie(new_cookie, 'https://prod-web.neu.edu/CPIP/pickup_new.html');
          }
          if (name === "dest") {
            data['destination_url'] = unescape(val);
          }
        }
        return loadTrace(data['destination_url']);
      }
    });
  };

  login = function(uuid) {
    return request.post({
      url: 'https://myneu.neu.edu/cp/home/login',
      form: {
        user: process.env.NEU_USER,
        pass: process.env.NEU_PASS,
        uuid: uuid
      }
    }, function(err, res, html) {
      return postLogin();
    });
  };

  start = function() {
    console.log('starting');
    return request('http://myneu.neu.edu/cp/home/displaylogin', function(err, res, html) {
      var $, uuid;
      if (!err) {
        $ = cheerio.load(html);
        uuid = $('script[language="javascript1.1"]').html().split('document.cplogin.uuid.value=\"')[1].split("\"")[0];
        login(uuid);
      }
    });
  };

}).call(this);
